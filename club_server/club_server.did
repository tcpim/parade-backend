type ChatClubMessage = record {
  id : text;
  updated_ts : nat64;
  emoji_reactions : vec record { text; nat32 };
  created_ts : nat64;
  user_id : text;
  words : text;
};
type ClubInfo = record {
  club_description : text;
  club_name : text;
  club_id : text;
};
type CollectionPostCreatedTsKey = record {
  post_id : text;
  canister_id : text;
  created_ts : nat64;
};
type CreatePostRequest = record {
  post_id : text;
  nfts : vec NftToken;
  created_by : text;
  created_ts : nat64;
  words : text;
  in_public : bool;
};
type CreatePostResponse = record { post : Post; error : opt ServerError };
type DeleteClubMessageRequest = record {
  deleter : text;
  deleted_ts : nat64;
  message_id : text;
};
type GetClubMessagesRequest = record { cursor : opt nat64; limit : opt int32 };
type GetClubMessagesResponse = record {
  messages : vec ChatClubMessage;
  error : opt ServerError;
  next_cursor : opt nat64;
};
type GetCollectionPostsRequest = record {
  cursor : opt CollectionPostCreatedTsKey;
  canister_id : text;
  limit : opt int32;
};
type GetCollectionPostsResponse = record {
  error : opt ServerError;
  next_cursor : opt CollectionPostCreatedTsKey;
  posts : vec Post;
};
type GetPostByIdResponse = record { post : opt Post };
type GetPostByIdsResponse = record { posts : vec opt Post };
type GetPostRepliesRequest = record {
  post_id : text;
  offset : int32;
  limit : opt int32;
};
type GetPostRepliesResponse = record {
  offset : int32;
  error : opt ServerError;
  post_replies : vec PostReply;
};
type GetPostsRequest = record {
  cursor : opt PostCreatedTsKey;
  limit : opt int32;
};
type GetPostsResponse = record {
  error : opt ServerError;
  next_cursor : opt PostCreatedTsKey;
  posts : vec Post;
};
type GetTrendingCollectionPostRequest = record {
  cursor : opt TrendingPostCollectionKey;
  canister_id : text;
  limit : opt int32;
};
type GetTrendingCollectionPostResponse = record {
  error : opt ServerError;
  next_cursor : opt TrendingPostCollectionKey;
  posts : vec Post;
};
type GetTrendingPostRequest = record {
  cursor : opt TrendingPostKey;
  limit : opt int32;
};
type GetTrendingPostResponse = record {
  error : opt ServerError;
  next_cursor : opt TrendingPostKey;
  posts : vec Post;
};
type InitClubCanisterRequest = record { env : text; info : ClubInfo };
type NftToken = record {
  image_height_width_ratio : text;
  token_index : nat16;
  token_id : text;
  image_url : text;
  image_thumbnail_url : text;
  canister_id : text;
  collection_name : text;
  image_type : text;
  image_onchain_url : text;
  club_id : text;
};
type Post = record {
  id : text;
  updated_ts : nat64;
  emoji_reactions : vec record { text; nat32 };
  nfts : vec NftToken;
  created_by : text;
  created_ts : nat64;
  replies : vec text;
  words : text;
  club_id : text;
  in_public : bool;
};
type PostCreatedTsKey = record { post_id : text; created_ts : nat64 };
type PostReply = record {
  id : text;
  post_id : text;
  emoji_reactions : vec record { text; nat32 };
  nfts : vec NftToken;
  created_by : text;
  created_ts : nat64;
  words : text;
};
type ReactClubMessageRequest = record { emoji : text; message_id : text };
type ReactEmojiRequest = record {
  post_id : opt text;
  reply_id : opt text;
  user : text;
  created_ts : nat64;
  emoji : text;
};
type ReactEmojiResponse = record { error : opt ServerError };
type ReplyPostRequest = record {
  post_id : text;
  reply_id : text;
  nfts : vec NftToken;
  user : text;
  created_ts : nat64;
  words : text;
};
type ReplyPostResponse = record { error : opt ServerError; reply : PostReply };
type SendClubMessageRequest = record {
  created_ts : nat64;
  sender : text;
  words : text;
  message_id : text;
};
type ServerError = record { error_message : text; api_name : text };
type SetClubInfoRequest = record { info : ClubInfo };
type TrendingPostCollectionKey = record {
  trending_info : TrendingPostKey;
  canister_id : text;
};
type TrendingPostKey = record {
  updated_ts : nat64;
  post_id : text;
  created_ts : nat64;
  trending_score : nat32;
};
type UpdateClubMessageRequest = record {
  updated_ts : nat64;
  updater : text;
  words : text;
  message_id : text;
};
service : (InitClubCanisterRequest) -> {
  create_post : (CreatePostRequest) -> (CreatePostResponse);
  delete_club_message : (DeleteClubMessageRequest) -> (opt ServerError);
  delete_post : (text) -> (opt ServerError);
  dlcm : () -> (opt ServerError);
  dlp : () -> (opt ServerError);
  get_canister_args : () -> (text) query;
  get_club_info : () -> (ClubInfo) query;
  get_club_message_by_id : (text) -> (opt ChatClubMessage) query;
  get_club_messages : (GetClubMessagesRequest) -> (
      GetClubMessagesResponse,
    ) query;
  get_post_by_id : (text) -> (GetPostByIdResponse) query;
  get_post_by_ids : (vec text) -> (GetPostByIdsResponse) query;
  get_post_replies : (GetPostRepliesRequest) -> (GetPostRepliesResponse) query;
  get_posts : (GetPostsRequest) -> (GetPostsResponse) query;
  get_posts_by_collection : (GetCollectionPostsRequest) -> (
      GetCollectionPostsResponse,
    ) query;
  get_trending_collection_posts : (GetTrendingCollectionPostRequest) -> (
      GetTrendingCollectionPostResponse,
    ) query;
  get_trending_posts : (GetTrendingPostRequest) -> (
      GetTrendingPostResponse,
    ) query;
  react_club_message : (ReactClubMessageRequest) -> (opt ServerError);
  react_emoji : (ReactEmojiRequest) -> (ReactEmojiResponse);
  reply_post : (ReplyPostRequest) -> (ReplyPostResponse);
  send_club_message : (SendClubMessageRequest) -> (opt ServerError);
  set_club_info : (SetClubInfoRequest) -> (opt ServerError);
  update_club_message : (UpdateClubMessageRequest) -> (opt ServerError);
}