type AddClubPostToStreetRequest = record {
  post_id : text;
  nfts : vec NftToken;
  created_by : text;
  created_ts : nat64;
  club_id : text;
};
type ClubPost = record { post_id : text; club_id : text };
type CollectionPostCreatedTsKey = record {
  post_id : text;
  canister_id : text;
  created_ts : nat64;
  club_id : opt text;
};
type CreateStreetPostRequest = record {
  post_id : text;
  nfts : vec NftToken;
  created_by : text;
  created_ts : nat64;
  words : text;
};
type CreateStreetPostResponse = record { post : Post; error : opt ServerError };
type DeletePostResponse = record { error : opt ServerError };
type GetCollectionPostsRequest = record {
  cursor : opt CollectionPostCreatedTsKey;
  canister_id : text;
  limit : opt int32;
};
type GetCollectionPostsResponse = record {
  error : opt ServerError;
  next_cursor : opt CollectionPostCreatedTsKey;
  posts : vec PostType;
};
type GetPostByIdResponse = record { post : opt Post };
type GetPostRepliesRequest = record {
  post_id : text;
  offset : int32;
  limit : opt int32;
};
type GetPostRepliesResponse = record {
  offset : int32;
  error : opt ServerError;
  post_replies : vec PostReply;
};
type GetStreetPostsRequest = record {
  cursor : opt PostCreatedTsKey;
  limit : opt int32;
};
type GetStreetPostsResponse = record {
  error : opt ServerError;
  next_cursor : opt PostCreatedTsKey;
  posts : vec PostType;
};
type GetTrendingCollectionPostRequest = record {
  cursor : opt TrendingPostCollectionKey;
  canister_id : text;
  limit : opt int32;
};
type GetTrendingCollectionPostResponse = record {
  error : opt ServerError;
  next_cursor : opt TrendingPostCollectionKey;
  posts : vec PostType;
};
type GetTrendingStreetPostRequest = record {
  cursor : opt TrendingPostKey;
  limit : opt int32;
};
type GetTrendingStreetPostResponse = record {
  error : opt ServerError;
  next_cursor : opt TrendingPostKey;
  posts : vec PostType;
};
type GetUserInfoResponse = record { user : opt User };
type GetUserPostsRequest = record {
  cursor : opt UserPostCreatedTsKey;
  user_id : text;
  limit : opt int32;
};
type GetUserPostsResponse = record {
  error : opt ServerError;
  next_cursor : opt UserPostCreatedTsKey;
  posts : vec PostType;
};
type NftToken = record {
  token_index : nat16;
  token_id : text;
  canister_id : text;
  collection_name : text;
  original_image_url : text;
  original_thumbnail_url : text;
};
type Post = record {
  id : text;
  updated_ts : nat64;
  emoji_reactions : vec record { text; nat32 };
  nfts : vec NftToken;
  created_by : text;
  created_ts : nat64;
  replies : vec text;
  words : text;
};
type PostCreatedTsKey = record {
  post_id : text;
  created_ts : nat64;
  club_id : opt text;
};
type PostReply = record {
  id : text;
  post_id : text;
  emoji_reactions : vec record { text; nat32 };
  nfts : vec NftToken;
  created_by : text;
  created_ts : nat64;
  words : text;
};
type PostType = record { post : opt Post; club_post : opt ClubPost };
type ReactEmojiRequest = record {
  post_id : opt text;
  reply_id : opt text;
  user : text;
  created_ts : nat64;
  emoji : text;
};
type ReplyPostRequest = record {
  post_id : text;
  reply_id : text;
  nfts : vec NftToken;
  user : text;
  created_ts : nat64;
  words : text;
};
type ReplyPostResponse = record { error : opt ServerError; reply : PostReply };
type ServerError = record { error_message : text; api_name : text };
type SetUserAvatarRequest = record {
  mime_type : text;
  user_id : text;
  avatar : vec nat8;
};
type SetUserBioRequest = record { bio : text; user_id : text };
type SetUserInfoResponse = record { user : User; error : opt ServerError };
type SetUserNameRequest = record { user_id : text; new_name : text };
type TrendingPostCollectionKey = record {
  trending_info : TrendingPostKey;
  canister_id : text;
};
type TrendingPostKey = record {
  updated_ts : nat64;
  post_id : text;
  created_ts : nat64;
  club_id : opt text;
  trending_score : nat32;
};
type UpdateClubPostStreetTrendingScoreRequest = record {
  new : TrendingPostKey;
  nft_canister_ids : vec text;
};
type User = record {
  id : text;
  bio : opt text;
  user_name : opt text;
  avatar : opt UserAvatar;
};
type UserAvatar = record { data : vec nat8; mime_type : text };
type UserPostCreatedTsKey = record {
  post_id : text;
  created_ts : nat64;
  user_id : text;
  club_id : opt text;
};
service : {
  add_club_post_to_street : (AddClubPostToStreetRequest) -> ();
  add_club_post_to_user : (UserPostCreatedTsKey) -> ();
  create_street_post : (CreateStreetPostRequest) -> (CreateStreetPostResponse);
  create_user : (text) -> ();
  delete_all_post : () -> ();
  delete_all_users : () -> ();
  delete_post : (text) -> (DeletePostResponse);
  get_post_replies : (GetPostRepliesRequest) -> (GetPostRepliesResponse) query;
  get_posts_by_collection : (GetCollectionPostsRequest) -> (
      GetCollectionPostsResponse,
    ) query;
  get_posts_by_user : (GetUserPostsRequest) -> (GetUserPostsResponse) query;
  get_street_post_by_id : (text) -> (GetPostByIdResponse) query;
  get_street_posts : (GetStreetPostsRequest) -> (GetStreetPostsResponse) query;
  get_trending_collection_posts : (GetTrendingCollectionPostRequest) -> (
      GetTrendingCollectionPostResponse,
    ) query;
  get_trending_street_posts : (GetTrendingStreetPostRequest) -> (
      GetTrendingStreetPostResponse,
    ) query;
  get_user_info : (text) -> (GetUserInfoResponse) query;
  react_emoji : (ReactEmojiRequest) -> (DeletePostResponse);
  reply_post : (ReplyPostRequest) -> (ReplyPostResponse);
  set_user_avatar : (SetUserAvatarRequest) -> (SetUserInfoResponse);
  set_user_bio : (SetUserBioRequest) -> (SetUserInfoResponse);
  set_user_name : (SetUserNameRequest) -> (SetUserInfoResponse);
  update_club_post_trending_score : (
      UpdateClubPostStreetTrendingScoreRequest,
    ) -> ();
}